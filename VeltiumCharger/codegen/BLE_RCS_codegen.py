'''
RWNP
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
================================================================================================================================
00000000000000001111111111111111222222222222222233333333333333334444444444444444555555555555555566666666666666667777777777777777
0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF

0123456789ABCDEF
IPSSCCHH00000000
'''

rcs_tables_h_prolog = '''//
// ble_rcs_common.h
//
// Reduced Characteristic Set for BLE
//
// Created by David Crespo (VirtualCode) on 2020/09/22
// Common tables and data to be used by server (charger device) and client (app)
//
// AUTOGENERATED FILE - DO NOT EDIT (!!!)
//
// DO NOT INCLUDE THIS FILE
// IT MUST BE INCLUDED ONLY FROM ble_rcs.c
//
'''

def read_chlist(ifn):
    f = open(ifn)
    t = f.read()
    f.close()

    lines = t.splitlines()

    keys = None
    chlist = []

    ch0 = {'i':0,'n':'INVALID','sz':'2','t':'RW','f':'utf8s','s':'0','c':'0','h':'0','v':''}
    chlist.append(ch0)

    idx = 1
    
    for line in lines:
        #print(line)
        toks = line.split(',')
        #print(toks)
        if keys == None:
            keys = toks
            #print(keys)
            continue

        ch = {}
        ch['i'] = idx

        for i in range(len(toks)):
            key = keys[i]
            if len(key) < 1: continue
            ch[keys[i]] = toks[i]

        if int(ch['sz']) > 64: continue
        if ch['t'].endswith('N'): continue

        idx += 1
        chlist.append(ch)

    return chlist

def value_for_RWN(rwn):
    val = 0;
    parity = 8;
    for ch in rwn:
        if 'R' == ch:
            val |= 1
            val ^= parity
        elif 'W' == ch:
            val |= 2
            val ^= parity
        elif 'N' == ch:
            val |= 4
            val ^= parity
    val &= 7
    return val

def create_handle_for_idx_table(chlist):
    h4i = {}
    icount = 0
    for ch in chlist:
        i = ch['i']
        icount += 1
        h = int(ch['h'],base=16)
        h4i[i] = h

    txt = ''
    txt += '// table with {} bytes\n'.format(icount)
    txt += 'static uint8_t table_handle_for_idx[1+RCS_MAX_IDX] = {\n'

    for i in range(icount):
        if i % 16 == 0:
            if i // 16 != 0:
                txt += '\n'
            txt += '    '
        txt += str(h4i[i])
        if i < icount-1:
            txt += ','
    txt += '\n};\n'

    print(txt)
    return txt
    
def create_idx_for_handle_table(chlist):
    i4h = {}
    icount = 0
    hmax = 0
    for ch in chlist:
        i = ch['i']
        icount += 1
        h = int(ch['h'],base=16)
        hmax = max(h, hmax)
        i4h[h] = i
    hcount = hmax + 1

    txt = ''
    txt += '// table with {} bytes\n'.format(hcount)
    txt += 'static uint8_t table_idx_for_handle[1+RCS_MAX_HANDLE] = {\n'

    for h in range(hcount):
        if h % 16 == 0:
            if h // 16 != 0:
                txt += '\n'
            txt += '    '
        i = 0
        if h in i4h:
            i = i4h[h]
        txt += str(i)
        txt += ','
    txt = txt[0:-1] + '\n};\n'

    print(txt)
    return txt

def create_size_table(chlist):
    icount = 0
    sz4i = {}
    for ch in chlist:
        i = ch['i']
        sz = ch['sz']
        icount += 1
        sz4i[i] = sz

    txt = ''
    txt += '// table with {} bytes\n'.format(icount)
    txt += 'static uint8_t table_size_for_idx[1+RCS_MAX_IDX] = {\n'

    for i in range(icount):
        if i % 16 == 0:
            if i // 16 != 0:
                txt += '\n'
            txt += '    '
        txt += str(sz4i[i])
        if i < icount-1:
            txt += ','
    txt += '\n};\n'

    print(txt)
    return txt
    
def create_type_table(chlist):
    icount = 0
    t4i = {}
    for ch in chlist:
        i = ch['i']
        t = ch['t']
        icount += 1
        t4i[i] = value_for_RWN(t)

    txt = ''
    txt += '// table with {} bytes\n'.format(icount)
    txt += 'static uint8_t table_type_for_idx[1+RCS_MAX_IDX] = {\n'

    for i in range(icount):
        if i % 16 == 0:
            if i // 16 != 0:
                txt += '\n'
            txt += '    '
        txt += str(t4i[i])
        if i < icount-1:
            txt += ','
    txt += '\n};\n'

    print(txt)
    return txt
    

def lpad(txt,sz):
    npad = sz - len(txt)
    if npad > 0:
        txt = ' ' * npad + txt
    return txt

def rpad(txt,sz):
    npad = sz - len(txt)
    if npad > 0:
        txt = txt + ' ' * npad
    return txt

def create_chr_report(chlist):
    hdrs = {'i':'idx','n':'name','sz':'size','t':'type','f':'format','s':'srvu','c':'chru','h':'hndl','v':'defval'}
    chlist2 = []
    chlist2.append(hdrs)
    for ch in chlist:
        ch2 = {}
        for key in ch:
            ch2[key] = str(ch[key])
        chlist2.append(ch2)
    maxsizes = {}
    for ch2 in chlist2:
        for key in ch2:
            if not key in maxsizes:
                maxsizes[key] = 0
            val = ch2[key]
            if  maxsizes[key] < len(val):
                maxsizes[key] = len(val)

    txt = ''
    for ch2 in chlist2:
        txt += '// '
        for key in ch2:
            val = ch2[key]
            pad = rpad
            if key == 'i' or key == 'sz':
                pad = lpad
            txt += pad(val, maxsizes[key]) + ' '
        txt += '\n'
    print(txt)
    return(txt)

def write_rcs_tables_h_file(ifn, chlist):
    f = open(ifn, 'w')
    f.write(rcs_tables_h_prolog)
    f.write('\n')
    f.write(create_chr_report(chlist))
    f.write('\n')
    f.write(create_handle_for_idx_table(chlist))
    f.write('\n')
    f.write(create_idx_for_handle_table(chlist))
    f.write('\n')
    f.write(create_size_table(chlist))
    f.write('\n')
    f.write(create_type_table(chlist))
    f.write('\n')
    
import os
def main():
    print('='*100)
    lista = os.listdir('codegen/')
    print (lista)
    chlist = read_chlist('codegen/art.csv')

    for ch in chlist:
        print(ch)

    write_rcs_tables_h_file('ble_rcs_tables.h', chlist)    
    
if __name__ == '__main__':
    main()
